from flask import Blueprint, jsonify, request, abort
from main import db
from models.cards import Card
from schemas.card_schema import card_schema, cards_schema
from models.users import User
from schemas.user_schema import user_schema, users_schema
from models.comments import Comment
from schemas.comment_schema import comment_schema, comments_schema
from datetime import date
from flask_jwt_extended import jwt_required, get_jwt_identity

cards = Blueprint('cards', __name__, url_prefix="/cards")

@cards.route("/", methods=["GET"])
def get_all_cards():
    cards_list = Card.query.all()
    if not cards_list:
        return abort(400, description="No existing cards")
    return jsonify(cards_schema.dump(cards_list))

# GET CARD BY ID
@cards.route("/<int:id>", methods=["GET"])
def get_card(id):
    card = Card.query.filter_by(id=id).first()
    if not card:
        return abort(404, description="Card does not exist")
    else:
        return jsonify(card_schema.dump(card))


# UPDATE A CARD WITH id
@cards.route("/<int:id>", methods=["PUT"])
@jwt_required()
def update_card(id):
    # CREATE A NEW CARD
    card_fields = card_schema.load(request.json)
    # GET THE USER ID BY INVOKING get_jwt_identity
    user_id = get_jwt_identity()
    # FIND THAT USER IN THE db
    user = User.query.get(user_id)
    # MAKE SURE user IS IN db
    if not user:
        return abort(401, description="Invalid user")
    # STOP THE REQUEST IF USER IS NOT AN ADMIN
    if not user.admin:
        return abort(401, description="Unauthorised user")
    # FIND THE CARD
    card = Card.query.filter_by(id=id).first()
    # RETURN AN ERROR IF card DOESN'T EXIST IN db
    if not card:
        return abort(400, description="Card does not exist")
    else:
        card.title = card_fields["title"]
        card.description = card_fields["description"]
        card.status = card_fields["status"]
        card.priority = card_fields["priority"]
        # NOT TAKEN FROM REQUEST, GENERATED BY SERVER (WHEN UPDATED)
        card.date = date.today()

        db.session.commit()

        return jsonify(card_schema.dump(card))

# # SEARCH CARDS
@cards.route("/search", methods=["GET"])
def search_cards():
    cards_list = []

    if request.args.get('priority'):
        cards_list = Card.query.filter_by(priority=request.args.get('priority'))

    elif request.args.get('status'):
        cards_list = Card.query.filter_by(status=request.args.get('status'))
    
    result = cards_schema.dump(cards_list)

    return jsonify(result)


# The POST route endpoint
@cards.route("/", methods=["POST"])
@jwt_required()
def create_card():
    # #Create a new card
    card_fields = card_schema.load(request.json)
    # GET user_id FROM JWT TOKEN
    user_id = get_jwt_identity()

    new_card = Card()
    new_card.title = card_fields["title"]
    new_card.description = card_fields["description"]
    new_card.status = card_fields["status"]
    new_card.priority = card_fields["priority"]
    # not taken from the request, generated by the server
    new_card.date = date.today()
    # ADD user_id FROM JWT TO new_card
    new_card.user_id = user_id

    # add to the database and commit
    db.session.add(new_card)
    db.session.commit()
    #return the card in the response
    return jsonify(card_schema.dump(new_card))


# Finally, we round out our CRUD resource with a DELETE method
@cards.route("/<int:id>/", methods=["DELETE"])
@jwt_required()
def delete_card(id):
    #get the user id invoking get_jwt_identity
    user_id = get_jwt_identity()
    #Find it in the db
    user = User.query.get(user_id)
    #Make sure it is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Stop the request if the user is not an admin
    card = Card.query.filter_by(id=id).first()
    if not card:
        return abort(400, description= "Card does not exist")
    if card.user_id == user.id or user.admin:
        # find the card
        #return an error if the card doesn't exist
        #Delete the card from the database and commit
        db.session.delete(card)
        db.session.commit()
        #return the card in the response
        return jsonify(card_schema.dump(card))
    else:
        return abort(401, description="Unauthorised user")


@cards.route("/<int:id>/comment", methods=["POST"])
@jwt_required()
def add_comment(id):
    user = get_jwt_identity()
    if not user:
        return abort(401, description="Invalid user")

    card = Card.query.get(id)
    if not card:
        return abort(400, description="Card does not exist")

    comment_fields = comment_schema.load(request.json)
    comment = Comment(
        message = comment_fields["message"],
        date = date.today(),
        user_id = user,
        card_id = card.id
    )
    db.session.add(comment)
    db.session.commit()
    
    return jsonify(comment_schema.dump(comment))


@cards.route("/<int:card_id>/comment/<int:com_id>", methods=["DELETE"])
@jwt_required()
def delete_comment(card_id, com_id):
    user_id = get_jwt_identity()
    user = User.query.get(user_id)
    if not user:
        return abort(401, description="Invalid user")

    card = Card.query.get(card_id)
    if not card:
        return abort(400, description= "Card does not exist")

    if card.user_id == user.id or user.admin:
        comment = Comment.query.get(com_id)
        if not comment:
            return abort(401, description="Comment does not exist")

        db.session.delete(comment)
        db.session.commit()

        return jsonify(comment_schema.dump(comment))
        
    else:
        return abort(401, description="Unauthorised user")




@cards.route("/users", methods=["GET"])
def get_users():
    users_list = User.query.all()
    return jsonify(users_schema.dump(users_list))